mod:

    (define (swap f x y) (f y x))
    
    (define (drop f) (lambda (dropped x) (f x)))
    
    (define (dup f) (lambda (x) (f x x)))
    
    (define (identity x) x)
    
    (define (main)
      (begin (= f identity) (= g (dup identity)) (g f f)))

shrink:

    (define (swap f x y) (f y x))
    
    (define (drop f) (lambda (dropped x) (f x)))
    
    (define (dup f) (lambda (x) (f x x)))
    
    (define (identity x) x)
    
    (define (main)
      (@let1 f identity (@let1 g (dup identity) (g f f))))

uniquify:

    (define (swap f x y) (f y x))
    
    (define (drop f) (lambda (dropped₁ x₁) (f x₁)))
    
    (define (dup f) (lambda (x₁) (f x₁ x₁)))
    
    (define (identity x) x)
    
    (define (main)
      (@let1 f₁ identity (@let1 g₁ (dup identity) (g₁ f₁ f₁))))

